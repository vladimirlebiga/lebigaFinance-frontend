{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/lebiga/Desktop/ITMap/lebigaFinance/src/components/Form/Schema.ts"],"sourcesContent":["import * as yup from 'yup';\nimport { InferType } from 'yup';\n\nexport const schemaContact = yup.object().shape({\n  name: yup\n    .string()\n    .required(\"Ім'я обов'язкове\")\n    .matches(\n      /^[A-Za-zА-Яа-яЇїІіЄєҐґ\\s-]+$/,\n      'Тільки кирилиця чи латиниця, пробіли і дефіси',\n    )\n    .min(2, \"Ім'я має містити принаймні 2 символи\")\n    .max(45, \"Ім'я може містити максимум 45 символів\"),\n  email: yup\n    .string()\n    .email('Невірний формат email')\n    .required(\"Email обов'язковий\"),\n  description: yup\n    .string()\n    .required(\"Опис обов'язковий\")\n    .min(10, 'Опис має містити принаймні 10 символів')\n    .max(1000, 'Опис може містити максимум 1000 символів'),\n  phone: yup.string().required('Телефон обовязковий'),\n  companyRegistration: yup.boolean(),\n  accountingBookkeeping: yup.boolean(),\n  taxReturns: yup.boolean(),\n  financialPlanning: yup.boolean(),\n  loansBusiness: yup.boolean(),\n  legalContract: yup.boolean(),\n  other: yup.boolean(),\n});\n\nexport type SignupSchema = InferType<typeof schemaContact>;\n"],"names":[],"mappings":";;;AAAA;;AAGO,MAAM,gBAAgB,oIAAI,MAAM,GAAG,KAAK,CAAC;IAC9C,MAAM,oIACH,MAAM,GACN,QAAQ,CAAC,oBACT,OAAO,CACN,gCACA,iDAED,GAAG,CAAC,GAAG,wCACP,GAAG,CAAC,IAAI;IACX,OAAO,oIACJ,MAAM,GACN,KAAK,CAAC,yBACN,QAAQ,CAAC;IACZ,aAAa,oIACV,MAAM,GACN,QAAQ,CAAC,qBACT,GAAG,CAAC,IAAI,0CACR,GAAG,CAAC,MAAM;IACb,OAAO,oIAAI,MAAM,GAAG,QAAQ,CAAC;IAC7B,qBAAqB,oIAAI,OAAO;IAChC,uBAAuB,oIAAI,OAAO;IAClC,YAAY,oIAAI,OAAO;IACvB,mBAAmB,oIAAI,OAAO;IAC9B,eAAe,oIAAI,OAAO;IAC1B,eAAe,oIAAI,OAAO;IAC1B,OAAO,oIAAI,OAAO;AACpB"}},
    {"offset": {"line": 25, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 31, "column": 0}, "map": {"version":3,"sources":["file:///Users/lebiga/Desktop/ITMap/lebigaFinance/src/components/Button/Button.tsx"],"sourcesContent":["'use client';\nimport Button from '@mui/material/Button';\nimport React from 'react';\nimport SendIcon from '@mui/icons-material/Send';\n\ninterface ButtonConfig {\n  variant: 'contained' | 'outlined' | 'text';\n  endIcon: React.ReactNode;\n  text: string;\n  type: 'button' | 'submit' | 'reset';\n}\n\nconst config: Record<string, ButtonConfig> = {\n  send: {\n    variant: 'contained',\n    endIcon: <SendIcon />,\n    text: 'Send',\n    type: 'submit',\n  },\n};\n\ninterface ButtonProps {\n  id: string;\n}\n\nexport const ButtonComponent = ({ id }: ButtonProps) => {\n  const { variant, endIcon, text, type } = config[id];\n  console.log(text);\n  return (\n    <Button variant={variant} endIcon={endIcon} type={type}>\n      {text}\n    </Button>\n  );\n};\n"],"names":[],"mappings":";;;;AAGA;AAFA;AADA;;;;AAYA,MAAM,SAAuC;IAC3C,MAAM;QACJ,SAAS;QACT,uBAAS,8OAAC,yJAAA,CAAA,UAAQ;;;;;QAClB,MAAM;QACN,MAAM;IACR;AACF;AAMO,MAAM,kBAAkB,CAAC,EAAE,EAAE,EAAe;IACjD,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,MAAM,CAAC,GAAG;IACnD,QAAQ,GAAG,CAAC;IACZ,qBACE,8OAAC,qJAAA,CAAA,UAAM;QAAC,SAAS;QAAS,SAAS;QAAS,MAAM;kBAC/C;;;;;;AAGP"}},
    {"offset": {"line": 67, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 73, "column": 0}, "map": {"version":3,"sources":["file:///Users/lebiga/Desktop/ITMap/lebigaFinance/src/components/Form/Form.tsx"],"sourcesContent":["'use client';\nimport { FormProvider, useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { InferType } from 'yup';\nimport { schemaContact } from './Schema';\n// import { Box } from '@mui/material';\n// import { PhoneInputComponent } from '../Input/PhoneInput';\n// import CheckboxInput from '../Checkbox/Checkbox';\n// import { TextareaComponent } from '../Textarea/Textarea';\nimport { ButtonComponent } from '../Button/Button';\n// import { InputComponent } from '../Input/Input';\n\n// Infer your form type directly from the schema:\ntype FormValues = InferType<typeof schemaContact>;\n\nexport function MyForm() {\n  const formProps = useForm({\n    defaultValues: {\n      name: '',\n      email: '',\n      description: '',\n      companyRegistration: false,\n      taxReturns: false,\n      accountingBookkeeping: false,\n      financialPlanning: false,\n      loansBusiness: false,\n      legalContract: false,\n      other: false,\n      phone: '',\n    },\n    resolver: yupResolver(schemaContact),\n  });\n\n  const onSubmit = (data: FormValues) => {\n    console.log(data);\n  };\n\n  return (\n    <div>\n      <FormProvider {...formProps}>\n        <form\n          onSubmit={(e) => {\n            e.preventDefault();\n            void formProps.handleSubmit(onSubmit)(e);\n          }}\n        >\n          {/* <div>\n            <InputComponent id=\"name\" />\n          </div>\n          <div>\n            <InputComponent id=\"email\" />\n          </div> */}\n          {/* <Box>\n            <PhoneInputComponent />\n          </Box> */}\n          {/* <Box>\n            <CheckboxInput id=\"accountingBookkeeping\" />\n          </Box>\n          <Box>\n            <CheckboxInput id=\"taxReturns\" />\n          </Box>\n          <Box>\n            <CheckboxInput id=\"financialPlanning\" />\n          </Box>\n          <Box>\n            <CheckboxInput id=\"companyRegistration\" />\n          </Box>\n          <Box>\n            <CheckboxInput id=\"loansBusiness\" />\n          </Box>\n          <Box>\n            <CheckboxInput id=\"legalContract\" />\n          </Box>\n          <Box>\n            <CheckboxInput id=\"other\" />\n          </Box> */}\n\n          {/* <Box>\n            <TextareaComponent id=\"description\" />\n          </Box> */}\n          <div>\n            <ButtonComponent id=\"send\" />\n          </div>\n        </form>\n      </FormProvider>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAEA;AAEA;AACA,uCAAuC;AACvC,6DAA6D;AAC7D,oDAAoD;AACpD,4DAA4D;AAC5D;AARA;AADA;;;;;;AAeO,SAAS;IACd,MAAM,YAAY,CAAA,GAAA,8JAAA,CAAA,UAAO,AAAD,EAAE;QACxB,eAAe;YACb,MAAM;YACN,OAAO;YACP,aAAa;YACb,qBAAqB;YACrB,YAAY;YACZ,uBAAuB;YACvB,mBAAmB;YACnB,eAAe;YACf,eAAe;YACf,OAAO;YACP,OAAO;QACT;QACA,UAAU,CAAA,GAAA,8JAAA,CAAA,cAAW,AAAD,EAAE,mIAAA,CAAA,gBAAa;IACrC;IAEA,MAAM,WAAW,CAAC;QAChB,QAAQ,GAAG,CAAC;IACd;IAEA,qBACE,8OAAC;kBACC,cAAA,8OAAC,8JAAA,CAAA,eAAY;YAAE,GAAG,SAAS;sBACzB,cAAA,8OAAC;gBACC,UAAU,CAAC;oBACT,EAAE,cAAc;oBAChB,KAAK,UAAU,YAAY,CAAC,UAAU;gBACxC;0BAoCA,cAAA,8OAAC;8BACC,cAAA,8OAAC,sIAAA,CAAA,kBAAe;wBAAC,IAAG;;;;;;;;;;;;;;;;;;;;;;;;;;AAMhC"}},
    {"offset": {"line": 148, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 154, "column": 0}, "map": {"version":3,"sources":["file:///Users/lebiga/Desktop/ITMap/lebigaFinance/src/components/Aside/Styled.tsx"],"sourcesContent":["'use client';\nimport { styled } from '@mui/material/styles';\n\nexport const StyledAside = styled('div')(({ theme }) => ({\n  position: 'fixed',\n  top: '0',\n  left: '0',\n  height: '100%',\n  width: '40%',\n  display: 'flex',\n  flexDirection: 'column',\n  justifyContent: 'space-between',\n  gap: '4px',\n  padding: '16px',\n  backgroundColor: theme.palette.primary.main,\n}));\n"],"names":[],"mappings":";;;AACA;AADA;;AAGO,MAAM,cAAc,CAAA,GAAA,0MAAA,CAAA,SAAM,AAAD,EAAE,OAAO,CAAC,EAAE,KAAK,EAAE,GAAK,CAAC;QACvD,UAAU;QACV,KAAK;QACL,MAAM;QACN,QAAQ;QACR,OAAO;QACP,SAAS;QACT,eAAe;QACf,gBAAgB;QAChB,KAAK;QACL,SAAS;QACT,iBAAiB,MAAM,OAAO,CAAC,OAAO,CAAC,IAAI;IAC7C,CAAC"}},
    {"offset": {"line": 173, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 179, "column": 0}, "map": {"version":3,"sources":["file:///Users/lebiga/Desktop/ITMap/lebigaFinance/src/components/Aside/Aside.tsx"],"sourcesContent":["'use client';\nimport React from 'react';\nimport { StyledAside } from './Styled';\n\nexport const Aside = () => {\n  return (\n    <aside>\n      <StyledAside>\n        <h1>availible 24/7</h1>\n      </StyledAside>\n    </aside>\n  );\n};\n"],"names":[],"mappings":";;;;AAEA;AAFA;;;AAIO,MAAM,QAAQ;IACnB,qBACE,8OAAC;kBACC,cAAA,8OAAC,qIAAA,CAAA,cAAW;sBACV,cAAA,8OAAC;0BAAG;;;;;;;;;;;;;;;;AAIZ"}},
    {"offset": {"line": 208, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 214, "column": 0}, "map": {"version":3,"sources":["file:///Users/lebiga/Desktop/ITMap/lebigaFinance/src/components/Pages/Styled.tsx"],"sourcesContent":["'use client';\nimport { styled } from '@mui/material/styles';\n\nexport const StyledWrapper = styled('div')(({ theme }) => ({\n  position: 'fixed',\n  top: '0',\n  left: '0',\n  height: '100%',\n  width: '40%',\n  display: 'flex',\n  flexDirection: 'column',\n  justifyContent: 'space-between',\n  gap: '4px',\n  padding: '16px',\n  backgroundColor: theme.palette.primary.main,\n}));\n"],"names":[],"mappings":";;;AACA;AADA;;AAGO,MAAM,gBAAgB,CAAA,GAAA,0MAAA,CAAA,SAAM,AAAD,EAAE,OAAO,CAAC,EAAE,KAAK,EAAE,GAAK,CAAC;QACzD,UAAU;QACV,KAAK;QACL,MAAM;QACN,QAAQ;QACR,OAAO;QACP,SAAS;QACT,eAAe;QACf,gBAAgB;QAChB,KAAK;QACL,SAAS;QACT,iBAAiB,MAAM,OAAO,CAAC,OAAO,CAAC,IAAI;IAC7C,CAAC"}},
    {"offset": {"line": 233, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 239, "column": 0}, "map": {"version":3,"sources":["file:///Users/lebiga/Desktop/ITMap/lebigaFinance/src/components/Pages/HomePage.tsx"],"sourcesContent":["'use client';\nimport React from 'react';\nimport { MyForm } from '../Form/Form';\nimport { Container } from '@mui/material';\nimport { Aside } from '../Aside/Aside';\nimport { StyledWrapper } from './Styled';\n\nexport const HomePage = () => {\n  return (\n    <div>\n      <Container>\n        <StyledWrapper>\n          <Aside />\n          <MyForm />\n        </StyledWrapper>\n      </Container>\n    </div>\n  );\n};\n"],"names":[],"mappings":";;;;AAEA;AAEA;AACA;AAFA;AAHA;;;;;;AAOO,MAAM,WAAW;IACtB,qBACE,8OAAC;kBACC,cAAA,8OAAC,mMAAA,CAAA,YAAS;sBACR,cAAA,8OAAC,qIAAA,CAAA,gBAAa;;kCACZ,8OAAC,oIAAA,CAAA,QAAK;;;;;kCACN,8OAAC,kIAAA,CAAA,SAAM;;;;;;;;;;;;;;;;;;;;;AAKjB"}},
    {"offset": {"line": 285, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}